

(function() {
    'use strict';

  
    const modalInstances = new Map();

 
    class Modal {
        constructor(element) {
        
            if (typeof element === 'string') {
                element = document.getElementById(element);
            }

            this.element = element;
            this.backdrop = null;
            this.isShown = false;
            this.scrollbarWidth = this.getScrollbarWidth();
            this.originalPaddingRight = document.body.style.paddingRight || '';
            this.originalOverflow = document.body.style.overflow || '';

        
            modalInstances.set(this.element, this);

           
            this.init();
        }

        init() {
            
            const closeButtons = this.element.querySelectorAll('[data-bs-dismiss="modal"]');
            closeButtons.forEach(button => {
                button.addEventListener('click', () => this.hide());
            });

           
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && this.isShown) {
                    this.hide();
                }
            });
        }

        // Calculer la largeur de la barre de défilement
        getScrollbarWidth() {
            const scrollDiv = document.createElement('div');
            scrollDiv.style.width = '100px';
            scrollDiv.style.height = '100px';
            scrollDiv.style.overflow = 'scroll';
            scrollDiv.style.position = 'absolute';
            scrollDiv.style.top = '-9999px';
            document.body.appendChild(scrollDiv);
            const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
            return scrollbarWidth;
        }

        // Créer l'arrière-plan modal
        createBackdrop() {
            this.backdrop = document.createElement('div');
            this.backdrop.className = 'modal-backdrop fade';
            document.body.appendChild(this.backdrop);

            // Forcer le reflow pour que l'animation fonctionne
            this.backdrop.offsetHeight;

            setTimeout(() => this.backdrop.classList.add('show'), 10);

            // Fermer en cliquant sur l'arrière-plan
            this.backdrop.addEventListener('click', () => this.hide());
        }

        // Afficher la modal
        show() {
            if (this.isShown) return;

            this.isShown = true;

            // Gérer la barre de défilement
            const hasScrollbar = document.body.clientWidth < window.innerWidth;
            if (hasScrollbar) {
                document.body.style.paddingRight = `${this.scrollbarWidth}px`;
            }
            document.body.style.overflow = 'hidden';

            // Créer backdrop
            this.createBackdrop();

            // Afficher modal
            this.element.style.display = 'block';
            this.element.setAttribute('aria-hidden', 'false');

            // Forcer le reflow pour que l'animation fonctionne
            this.element.offsetHeight;

            setTimeout(() => {
                this.element.classList.add('show');
            }, 10);

            // Focus sur le premier élément
            setTimeout(() => {
                const focusableElements = this.element.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
                if (focusableElements.length) {
                    focusableElements[0].focus();
                }
            }, 300);
        }

        // Masquer la modal
        hide() {
            if (!this.isShown) return;

            this.isShown = false;

            // Masquer la modal
            this.element.classList.remove('show');

            setTimeout(() => {
                this.element.style.display = 'none';
                this.element.setAttribute('aria-hidden', 'true');

                // Supprimer le backdrop
                if (this.backdrop) {
                    this.backdrop.classList.remove('show');
                    setTimeout(() => {
                        if (this.backdrop.parentNode) {
                            document.body.removeChild(this.backdrop);
                        }
                        this.backdrop = null;
                    }, 150);
                }

                // Restaurer le scroll
                document.body.style.paddingRight = this.originalPaddingRight;
                document.body.style.overflow = this.originalOverflow;
            }, 150);
        }

        // Méthode staticque pour récupérer une instance
        static getInstance(element) {
            // Si element est une string (id), obtenir l'élément DOM
            if (typeof element === 'string') {
                element = document.getElementById(element);
            }

            // Retourner l'instance existante ou en créer une nouvelle
            if (modalInstances.has(element)) {
                return modalInstances.get(element);
            }

            return new Modal(element);
        }
    }

    // Créer une API compatible avec Bootstrap exactement comme dans Bootstrap original
    window.bootstrap = {
        Modal: Modal
    };

    // Initialiser les modals au chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
        // Ajouter les styles CSS pour le backdrop si non présent
        if (!document.getElementById('light-modal-styles')) {
            const styleEl = document.createElement('style');
            styleEl.id = 'light-modal-styles';
            styleEl.textContent = `
        .modal-backdrop {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background-color: rgba(0, 0, 0, 0.5);
          z-index: 1040;
          opacity: 0;
          transition: opacity 0.15s linear;
        }
        .modal-backdrop.show {
          opacity: 0.5;
        }
      `;
            document.head.appendChild(styleEl);
        }

      
    });
})();